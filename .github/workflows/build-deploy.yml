name: Build, Release, Push to ECR and deploy to Asy network
on:
  push:
    branches:
      - main

jobs:
  release:
    name: Create New Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      deployments: write

    outputs:
      semver: ${{ steps.changelog.outputs.tag }}

    steps:
      # check out the repository with all releases
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Create a temporary, uniquely named branch to push release info to
      - name: create temporary branch
        run: git branch "release-from-${{ github.sha }}" "${{ github.sha }}"

      # switch to the temporary branch
      - name: switch to new branch
        run: git checkout release-from-${{ github.sha }}

      # update app config with version
      - name: get-npm-version
        id: package-version
        run: |
          LF_VERSION=$(cat package.json | jq -r '.version')
          echo "current-version=$LF_VERSION" >> "$GITHUB_OUTPUT"

      # create release info and push it upstream
      - name: conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          version-file: "./package.json,./package-lock.json"
          git-branch: "release-from-${{ github.sha }}"
          skip-git-pull: true

      # create PR using GitHub CLI
      - name: create PR with release info
        if: steps.changelog.outputs.skipped == 'false'
        id: create-pr
        run: gh pr create --base main --head release-from-${{ github.sha }} --title 'Merge new release into main' --body 'Created by Github action'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # merge PR using GitHub CLI
      - name: merge PR with release info
        if: steps.changelog.outputs.skipped == 'false'
        id: merge-pr
        run: gh pr merge --admin --merge --subject 'Merge release info' --delete-branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # release info is now in main so we can continue as before
      - name: create release with last commit
        if: steps.changelog.outputs.skipped == 'false'
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.changelog.outputs.tag }}
          name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}

  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Environment Variables
        run: |
          touch .env
          echo BOT_TOKEN=${{ secrets.BOT_TOKEN }} >> .env
          echo NEXT_PUBLIC_BOT_URL=${{ vars.NEXT_PUBLIC_BOT_URL }} >> .env
          echo NEXT_PUBLIC_WEB_APP_URI_PREFIX=${{ vars.NEXT_PUBLIC_WEB_APP_URI_PREFIX }} >> .env
          echo NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }} >> .env
          echo NEXT_PUBLIC_BASE_URL=${{ vars.NEXT_PUBLIC_BASE_URL }} >> .env
          echo NEXT_PUBLIC_VERSION=${{ needs.release.outputs.semver }} >> .env
          echo NODE_ENV=${{ vars.ENV }} >> .env
          echo DOMAIN=${{ vars.DOMAIN }} >> .env

      - name: Build, Tag, and Push the Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ needs.release.outputs.semver }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to Asy network
        run: |
          curl -X POST ${{ secrets.DEPLOYMENT_URL }}
